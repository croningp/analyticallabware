!* This file contains the macros necessary to operate Agilent HPLC system
!* using remote communication through COMMAND/REPLY files. Once this file is
!* loaded - the system will continuosly monitor for new commands in COMMAND
!* file, read it and evaluate given command. The replies are saved as text
!* string into REPLY file.
!*
!* The following convention is used for the commands:
!* (whitespace " " is used as separator)
!* <CLIENTID> <COMMAND_NO> <COMMAND>
!* where
!*    - CLIENTID - 8 character identifying client for multiclient operation.
!*    - COMMAND_NO - command number to identify new incomming command from
!*        client. Should always be 4-character in XXXX format, prepended
!*        with 0 if needed (e.g. 0004).
!*    - COMMAND - actual command string, evaluated and executed by the
!*        ChemStation command line.
!*
!* The following convention is used for the replies:
!* (whitespace " " is used as separator)
!* <CLIENTID> <COMMAND_NO> <REPLY> <RESPONSE>
!* where
!*    - CLIENTID - 8 character identifying client that currently running the
!*        HPLC. If HPLC is currently idle, the client ID from the incomming
!*        command will be returned. Is printed as is and should be parsed
!*        using whitespace as separator.
!*    - COMMAND_NO - command number to identify new incomming command from
!*        client. Is printed as is, should be parsed using whitespace as
!*        separator.
!*    - REPLY - reply string, identifying the status of the command:
!*        "ACK" - command received and acknowledged.
!*        "DONE" - command executed.
!*        "ERROR" - command returned an exception. The error message follows.
!*    - RESPONSE - response string from the instrument. " " if no response
!*        required.


!* Monitoring given COMMAND and REPLY files in a loop, until "Exit" is
!* requested. The incomming command is split according to the command string
!* definitions and evalutated. The REPLY file is then populated with
!* corresponding reply.
!*
!* Parameters:
!*    commandfile - filepath to the input file (where commands are read).
!*    replyfile - filepath to the output file (where replies are written).
!*    logfile - filepath to "log" executed commands.
Name MonitorFile

    Parameter commandfile$, replyfile$, logfile$
    Local input_$, command_no, command$, response$, last_command_no, clientid

    ! "Global" variable for storing current client id
    currentclinetid = 0

    Open logfile$ for append as #5
    Print #5, Time$(), "Starting. Commandfile: ", commandfile$, "Replyfile: ", replyfile$
    Close #5

    ! Overwrite files
    Open commandfile$ for output as #3
    Print #3, "00000000 0000 Sleep 1"
    Close #3
    Open replyfile$ for output as #4
    Close #4

    last_command_no = 0

    Repeat
        errorflag = 0
        response$ = " "

        ! Reading each .5 seconds
        Sleep 0.5

        ! Reading input
        Open commandfile$ for input as #3
        Input #3, input_$
        Close #3

        ! *** PARSING THE STRING ***
        ! Checking for client ID - first 8 characters.
        ! The numeration here starts with 1, not 0.
        clientid = Val (input_$[1:8])

        ! Command number
        ! Characters from 10 to 14, inclusive
        ! Converting to integer
        command_no = Val (input_$[10:14])

        ! Actual command, everyting after command number and separator (" ")
        ! Characters 15 to end
        command$ = input_$[15:Len(input_$)]

        ! Handling incoming commands
        ! Either when new client is querying
        ! or new command from the current client is comming
        If ((command_no != last_command_no) or (clientid != currentclinetid)) Then

            ! Logging
            Open logfile$ for append as #5
            Print #5, Time$(), "New incomming command: ", input_$
            Close #5

            last_command_no = command_no

            Print "Executing: ", in$

            ! Acknowledge reading command
            Open replyfile$ for output as #4
            Print #4, currentclinetid, command_no, "ACK"
            Close #4

            If command$ = "Exit" Then
                ! Do nothing
            Else
                ! Evaluating
                Evaluate command$
                On Error HandleError currentclinetid, command_no, command$, replyfile$
            EndIf

            If errorflag = 0 Then
                ! Write output
                Open replyfile$ for append as #4
                Print #4, currentclinetid, command_no, "ACK", response$
                Close #4
            EndIf

            ! Confirm command execution
            Open replyfile$ for append as #4
            Print #4, currentclinetid, command_no, "DONE", response$
            Close #4
        EndIf

    ! Running the loop until "Exit" requested
    Until command$ = "Exit"

    Print "Idle"

    ! Logging
    Open logfile$ for append as #5
    Print #5, Time$(), "Finished."
    Close #5

EndMacro


!* Handling errors if any happens during command execution
Name HandleError

    Parameter clientid, command_no, command$, replyfile$

    errorflag = 1
    Open replyfile$ for append as #4
    Print #4, clientid, command_no, "ERROR", command$, "caused Error #", _Error
    Close #4

EndMacro


!* Function to run the MonitorFile in the background
Name HPLCTalk_Loop

    MonitorFile "C:\Users\group\command", "C:\Users\group\reply", "C:\Users\group\hplc_log"

EndMacro


!* Starting the background file monitoring
Name HPLCTalk_Run

    If CPExists(HPLCTalk_Cp) = 0 Then
        CpStart HPLCTalk_Cp
    EndIf

    CpRequest HPLCTalk_Cp, HPLCTalk_Loop
EndMacro


!* Stopping background file monitoring
Name HPLCTalk_Stop
    CpTerminate HPLCTalk_Cp
EndMacro
